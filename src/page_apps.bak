use egui::Ui;
use ini::Ini;
use std::process::Command;

pub fn page_apps(ui: &mut Ui, config: &Ini)
{
    let exes_local = config.section(Some("exes-local")).unwrap();
    let exes_online = config.section(Some("exes-online")).unwrap();
    let msis_local = config.section(Some("msis-local")).unwrap();
    let msis_online = config.section(Some("msis-online")).unwrap();

    ui.columns(3, |ui|{
        ui[0].heading("Click to Install Apps");
        egui::ScrollArea::vertical().id_source("InstallApps").show(&mut ui[0], |ui|{
            ui.label("Browsers");
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Chrome") ).clicked()
            {
                winget_install("Google.Chrome");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Firefox") ).clicked()
            {
                winget_install("Mozilla.Firefox");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Opera") ).clicked()
            {
                winget_install("Opera.Opera");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Opera GX") ).clicked()
            {
                winget_install("Opera.OperaGX");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Brave") ).clicked()
            {
                winget_install("Brave.Brave");
            }
            ui.label("Networking / NAS");
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("AnyConnect") ).clicked()
            {
                winget_install("9WZDNCRDJ8LH");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("UniFi Network Application") ).clicked()
            {
                winget_install("UbiquitiInc.UnifiNetworkApplication");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("WiFi Man") ).clicked()
            {
                winget_install("UbiquitiInc.WiFimanDesktop");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Advanced IP Scanner") ).clicked()
            {
                winget_install("Famatech.AdvancedIPScanner");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Putty") ).clicked()
            {
                winget_install("PuTTY.PuTTY");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Synology Assistant") ).clicked()
            {
                winget_install("Synology.Assistant");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Synology Business Backup") ).clicked()
            {
                winget_install("Synology.ActiveBackupForBusinessAgent");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Synology Drive Client") ).clicked()
            {
                winget_install("Synology.DriveClient");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("QNAP Finder") ).clicked()
            {
                winget_install("QNAP.QfinderPro");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("QNAP External RAID MNGR") ).clicked()
            {
                winget_install("QNAP.ExternalRAIDManager");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("QNAP Qsync") ).clicked()
            {
                winget_install("QNAP.Qsync");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Java") ).clicked()
            {
                winget_install("Oracle.JavaRuntimeEnvironment");
            }
            ui.label("System");
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("7-zip") ).clicked()
            {
                winget_install("7zip.7zip");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Treesize Free") ).clicked()
            {
                winget_install("JAMSoftware.TreeSize.Free");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Bleachbit") ).clicked()
            {
                winget_install("BleachBit.BleachBit");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("MSI-Afterburner") ).clicked()
            {
                winget_install("Guru3D.Afterburner");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("NV Clean Install") ).clicked()
            {
                winget_install("TechPowerUp.NVCleanstall")
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("GeForce Experience") ).clicked()
            {
                winget_install("Nvidia.GeForceExperience");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Hardware Info") ).clicked()
            {
                winget_install("REALiX.HWiNFO");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Crystal Disk Info") ).clicked()
            {
                winget_install("CrystalDewWorld.CrystalDiskInfo");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Display Driver Uninstaller") ).clicked()
            {
                winget_install("Wagnardsoft.DisplayDriverUninstaller");
            }
            ui.label("Misc");
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Acrobat Reader DC") ).clicked()
            {
                winget_install("Adobe.Acrobat.Reader.64-bit");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Yubikey Manager") ).clicked()
            {
                winget_install("Yubico.YubikeyManager");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Discord") ).clicked()
            {
                winget_install("Discord.Discord");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Nextcloud") ).clicked()
            {
                winget_install("Nextcloud.NextcloudDesktop");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Plex App") ).clicked()
            {
                winget_install("Plex.Plex");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Plex Server") ).clicked()
            {
                winget_install("Plex.PlexMediaServer");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Jellyfin") ).clicked()
            {
                winget_install("Jellyfin.JellyfinMediaPlayer");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("VLC Media Player") ).clicked()
            {
                winget_install("VideoLAN.VLC");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Spotify") ).clicked()
            {
                winget_install("Spotify.Spotify");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("iTunes") ).clicked()
            {
                winget_install("Apple.iTunes");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Google Drive") ).clicked()
            {
                winget_install("Google.GoogleDrive");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Libre Office") ).clicked()
            {
                winget_install("TheDocumentFoundation.LibreOffice");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Samsung Dex") ).clicked()
            {
                winget_install("Samsung.DeX");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Samsung Smart Switch") ).clicked()
            {
                winget_install("Samsung.SmartSwitch");
            }
            ui.label("Design and Development");

            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("GIMP") ).clicked()
            {
                winget_install("GIMP.GIMP");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Android Studio") ).clicked()
            {
                winget_install("Google.AndroidStudio");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("FreeCAD") ).clicked()
            {
                winget_install("FreeCAD.FreeCAD");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("KiCAD") ).clicked()
            {
                winget_install("KiCad.KiCad");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("VS Code") ).clicked()
            {
                winget_install("Microsoft.VisualStudioCode");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Rustup") ).clicked()
            {
                winget_install("Rustlang.Rustup");
            }
            ui.label("Games");
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Steam") ).clicked()
            {
                winget_install("Valve.Steam");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Epic Games") ).clicked()
            {
                winget_install("EpicGames.EpicGamesLauncher");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("R2 Modman") ).clicked()
            {
                winget_install("ebkr.r2modman");
            }
            
            ui.add_space(20.0);
        });
        

        ui[1].heading("Config Specified Installs");
        egui::ScrollArea::vertical().id_source("ConfigApps").show(&mut ui[1], |ui|{


            ui.label("Local EXE's");
            for (key, value) in exes_local.iter()
            {
                if ui.add_sized([100.0, 40.0], egui::widgets::Button::new(key) ).clicked()
                {
                    println!("{value}");
                }
            }

            ui.label("Online EXE's");
            for (key, value) in exes_online.iter()
            {
                if ui.add_sized([100.0, 40.0], egui::widgets::Button::new(key) ).clicked()
                {
                    println!("{value}");
                }
            }

            ui.label("Local MSI's");
            for (key, value) in msis_local.iter()
            {
                if ui.add_sized([100.0, 40.0], egui::widgets::Button::new(key) ).clicked()
                {
                    println!("{value}");
                }
            }

            ui.label("Online MSI's");
            for (key, value) in msis_online.iter()
            {
                if ui.add_sized([100.0, 40.0], egui::widgets::Button::new(key) ).clicked()
                {
                    println!("{value}");
                }
            }
            


        });

        ui[2].heading("Winget Options");
        egui::ScrollArea::vertical().id_source("WingetOption").show(&mut ui[2], |ui|{
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Update All Apps") ).clicked()
            {
                winget_update_all();
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Install Winget") ).clicked()
            {
                launch("ms-windows-store://pdp/?ProductId=9NBLGGH4NNS1");
            }
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Check MS Store Updates") ).clicked()
            {
                launch("ms-windows-store://downloadsandupdates");
            }          
            ui.heading("Uninstalls");
            if ui.add_sized([100.0, 40.0], egui::widgets::Button::new("Personal Teams") ).clicked()
            {

            }
            ui.add_space(20.0);
        });
    });
}

#[tokio::main]
async fn launch(app: &str) {
    Command::new("cmd")
    .arg("/C")
    .arg("start")
    .arg(app)
    .spawn()
    .expect("failed to execute process");
}

#[tokio::main]
async fn winget_install(app: &str) {
    Command::new("cmd")
    .arg("/C")
    .arg("start")
    .args(["powershell", "-window", "minimized","winget","install",app,"-h","--accept-package-agreements","--accept-source-agreements","--force"])
    .spawn()
    .expect("failed to execute process");
}

#[tokio::main]
async fn winget_update_all() {
    Command::new("cmd")
    .arg("/C")
    .arg("start")
    .args(["powershell", "-window", "minimized","winget","upgrade","--all","--include-unknown","-h","--accept-package-agreements","--accept-source-agreements","--force"])
    .spawn()
    .expect("failed to execute process");
}